//class, store configuration generated by lammps 'data' commend
#pragma once
#include "particle.h"
#include "input.h"
#include <iostream>
#include <fstream>
#include <string>
#include <array>
#include <vector>
#include <cmath>
#include <boost/progress.hpp>
//#include <algorithm>
using std::ofstream;
using std::clog;
using std::cout;
using std::to_string;

class Configuration
{
private:
	static constexpr size_t LINE_SKIP_MAX = 2147483647;
	static constexpr double PI = 3.14159265358979323846;
	static size_t HEAD_INFO_LINE; //data file description information, e.g. mass, pair etc. default value = 22
	static size_t GAP_LINE;		 //description line between position and velocity. default value = 3
	size_t particle_num = 0; //total particle number
	unsigned long long timestep = 0;

	double xlo = 0;//xlo difined in lammps
	double ylo = 0;//ylo defined in lammps
	double zlo = 0;//zlo defined in lammps

	double xhi = 0;//xhi difined in lammps
	double yhi = 0;//yhi defined in lammps
	double zhi = 0;//zhi defined in lammps

	double xy = 0;//xy defined in lammps
	double xz = 0;//xz defined in lammps
	double yz = 0;//yz defined in lammps

	size_t type_num = 0;//number of particle types

	vector<string> strvec_mass_info; //store mass information in data file
	vector<string> strvec_pair_info; //store pair information in data file

	vector<Particle> vec_particle; //particles container
	string filename;

public:
	Configuration(string config_file);				   //

	inline static size_t GET_LINE_MAX() { return LINE_SKIP_MAX; }
	inline static size_t GET_HEAD_INFO_LINE() { return HEAD_INFO_LINE; }
	inline static size_t GET_GAP_LINE() { return GAP_LINE; }

	inline static void SET_HEAD_INFO_LINE(size_t _HEAD_INFO_LINE) { HEAD_INFO_LINE = _HEAD_INFO_LINE; }
	inline static void SET_GAP_LINE(size_t _GAP_LINE) { GAP_LINE = _GAP_LINE; }

	inline void set_particle_num(size_t _num) { particle_num = _num; } //set total number of particles
	inline size_t get_particle_num() const { return particle_num; }	   //return total number of particles
	inline size_t get_type_num() { return type_num; }				   //return number of particle types
	inline const vector<string>& get_mass_info() const				//return mass info
	{
		return strvec_mass_info;
	}
	inline const vector<string>& get_pair_info() const			//return pair info
	{
		return strvec_pair_info;
	}

	inline double get_xlo() const { return xlo; }//return xhi difined in lammps
	inline double get_xhi() const { return xhi; }//return xhi difined in lammps
	inline double get_ylo() const { return ylo; }//return ylo difined in lammps
	inline double get_yhi() const { return yhi; }//return yhi difined in lammps
	inline double get_zlo() const { return zlo; }//return zlo difined in lammps
	inline double get_zhi() const { return zhi; }//return zhi difined in lammps
	inline double get_xy() const { return xy; }//return xy difined in lammps
	inline double get_yz() const { return yz; }//return yz difined in lammps
	inline double get_xz() const { return xz; }//return xz difined in lammps

	inline unsigned long long get_timestep() const { return timestep; }

	inline const string& get_filename() const { return filename; }

	inline const Particle& get_particle(size_t _id) const //return particle with given ID
	{
		for (size_t i = 0; i < vec_particle.size(); i++)
		{
			if (_id == vec_particle[i].id)
			{
				return vec_particle[i];
			}
		}
		std::cerr << "particle " << _id << " not found";
		throw("particle " + std::to_string(_id) + " not found");
	}
	inline const vector<Particle>& get_particle() const//return vector of all particles
	{
		return vec_particle;
	}

	const vector<double> compute_RDF(size_t rdf_size, double r_cut);

};

class Configuration_With_Sq :public Configuration
{
private:
	vector<double> vec_r_ij;
	vector<double> vec_rx_ij;
	vector<double> vec_ry_ij;
	vector<double> vec_rz_ij;
	vector<double> vec_q;
	bool rij_update_flag = false;

public:
	Configuration_With_Sq(string fname) :Configuration(fname) {	};
	void compute_rij();
	const vector<double> compute_struct_factor(double q_start, double q_delta, size_t q_size, string direction);

	inline const vector<double> get_r_ij() { return vec_r_ij; };
	inline const vector<double> get_rx_ij() { return vec_rx_ij; };
};

double convert_to_period_distance(double distance, double lbox);
